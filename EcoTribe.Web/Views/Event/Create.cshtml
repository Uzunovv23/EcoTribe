@model EcoTribe.BusinessObjects.InputModels.EventInputModel

@{
    ViewData["Title"] = "Create Event";
}

<h2>Create New Event</h2>

<form asp-action="Create" method="post">

    <div class="mb-3">
        <label for="addressSearch" class="form-label">Find by address</label>
        <div class="input-group">
            <input type="text" id="addressSearch" class="form-control" placeholder="Enter city, street, etc.">
            <button type="button" class="btn btn-outline-primary" onclick="geocodeAddress()">Find location</button>
        </div>
    </div>

    <div id="map" style="height: 400px;" class="mb-4"></div>

    <input asp-for="Latitude" type="hidden" />
    <input asp-for="Longitude" type="hidden" />

    <div class="mb-3">
        <label asp-for="Name" class="form-label"></label>
        <input asp-for="Name" class="form-control" />
        <span asp-validation-for="Name" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="City" class="form-label"></label>
        <input asp-for="City" class="form-control" id="CityInput" />
        <span asp-validation-for="City" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="Type" class="form-label"></label>
        <input asp-for="Type" class="form-control" />
        <span asp-validation-for="Type" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="RequiredVolunteers" class="form-label"></label>
        <input asp-for="RequiredVolunteers" class="form-control" type="number" />
        <span asp-validation-for="RequiredVolunteers" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="CreatedBy" class="form-label"></label>
        <input asp-for="CreatedBy" class="form-control" type="number" />
        <span asp-validation-for="CreatedBy" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="Description" class="form-label"></label>
        <textarea asp-for="Description" class="form-control"></textarea>
        <span asp-validation-for="Description" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="Start" class="form-label"></label>
        <input asp-for="Start" class="form-control" type="datetime-local" />
        <span asp-validation-for="Start" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="End" class="form-label"></label>
        <input asp-for="End" class="form-control" type="datetime-local" />
        <span asp-validation-for="End" class="text-danger"></span>
    </div>

    <button type="submit" class="btn btn-success">Save</button>
    <a asp-controller="Location" asp-action="Index" class="btn btn-secondary">Cancel</a>
</form>

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>

<script>
    const map = L.map('map').setView([42.6977, 23.3219], 13); 
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '© OpenStreetMap contributors'
    }).addTo(map);

    let marker;

    map.on('click', function (e) {
        const lat = e.latlng.lat.toFixed(6);
        const lng = e.latlng.lng.toFixed(6);

        if (!marker) {
            marker = L.marker([lat, lng]).addTo(map);
        } else {
            marker.setLatLng([lat, lng]);
        }

        document.querySelector('[name="Latitude"]').value = lat;
        document.querySelector('[name="Longitude"]').value = lng;

        reverseGeocode(lat, lng); 
    });

    function geocodeAddress() {
        const address = document.getElementById("addressSearch").value;

        if (!address) {
            alert("Please enter an address.");
            return;
        }

        fetch("https://nominatim.openstreetmap.org/search?format=json&q=" + encodeURIComponent(address))
            .then(response => response.json())
            .then(data => {
                if (data && data.length > 0) {
                    const lat = parseFloat(data[0].lat).toFixed(6);
                    const lon = parseFloat(data[0].lon).toFixed(6);

                    map.setView([lat, lon], 15);

                    if (!marker) {
                        marker = L.marker([lat, lon]).addTo(map);
                    } else {
                        marker.setLatLng([lat, lon]);
                    }

                    document.querySelector('[name="Latitude"]').value = lat;
                    document.querySelector('[name="Longitude"]').value = lon;

                    reverseGeocode(lat, lon); 
                } else {
                    alert("Location not found. Try a more specific address.");
                }
            })
            .catch(err => {
                console.error("Geocoding error:", err);
                alert("Error searching address.");
            });
    }

    function reverseGeocode(lat, lon) {
        fetch(`/api/geolocation/reverse?lat=${lat}&lon=${lon}`)
            .then(response => {
                if (!response.ok) throw new Error("Backend reverse geocoding failed");
                return response.json();
            })
            .then(data => {
                if (data && data.length > 0 && data[0].name) {
                    document.getElementById("CityInput").value = data[0].name;
                }
            })
            .catch(err => {
                console.error("Reverse geocoding failed:", err);
            });
    }
</script>
